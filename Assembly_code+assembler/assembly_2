nop
nop
load r1
mov r2, r0
imm 1
add r1
mov r1, r0
load r1
mov r3, r0
imm 1
add r1
mov r1, r0
mov r4, r1
nop
nop
nop
nop
load r4
mov r5, r0
imm 1
add r4
mov r4, r0
load r4
mov r6, r0
imm 1
add r4
mov r4, r0
clear           
mov r0, r3      //Subtraction
sub r6
mov r7, r0
invert
mov r0, r2
sub r5
mov r8, r0      //End subtraction
mov r0, r11         //Check if need to invert
cmp r2  
jcnd 12     // jmp if A is positive
mov r0, r11
cmp r5
jcnd 14      //jmp if B is positive (A neg, B pos)
jmp 13      //jmp if A and B are negative
nop
nop         
clear
mov r0, r11
cmp r5  
jcnd 13     //Jmp if A and B are positive
jmp 15                      //Finish if A is positive B is negative 
nop
nop         
clear
mov r0, r8              //Check if answer is negative
and r11
cmp r10
jcnd 14             //Answer is negative, invert
jmp 15                 //Answer is positive, its food
nop
nop
nop
clear
imm 0 
sub r7
mov r7, r0
invert 
imm 0
sub r8
mov r8, r0
nop
nop     //Check whether to update max value
clear
mov r0, r8
cmp r15
jcnd 7       // go Update max value
mov r0, r15
cmp r8
jcnd 10            // 1 if MAX_HIGH > r8 
mov r0, r14
cmp r7          // 1 if MAX_LOW > r7
jcnd 10
nop
nop     //Update Max value
clear
mov r15, r8
mov r14, r7
nop
nop     //Check whether to update minimum value
clear
mov r0, r13
cmp r8
jcnd 8
mov r0, r8
cmp r13
jcnd 9
mov r0, r7
cmp r12
jcnd 9
nop
nop         //Update min value
clear
mov r13, r8
mov r12, r7
nop
nop     
clear
mov r0, r9
cmp r4
jcnd 11     // Jump to start of loop_2
nop
nop
clear
imm 2
mov r4, r0
mov r0, r9
clear
sub r4
clear
cmp r1
jcnd 6      //Jump to start of loop_1
imm 3        //Save min and max to memeory
add r9
mov r9, r0
mov r0, r13
store r9
imm 1
add r9
mov r9, r0
mov r0, r12
store r9
imm 1 
add r9
mov r9, r0
mov r0, r15
store r9
imm 1 
add r9
mov r9, r0
mov r0, r14
store r9
nop
nop
nop
nop
